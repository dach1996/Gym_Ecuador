<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GatewayCoreAPI</name>
    </assembly>
    <members>
        <member name="M:GatewayCoreAPI.Controllers.V1.AdministrationController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.AdministrationController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AdministrationController.GetInitialCatalogues(LogicApi.Model.Request.Administration.GetInitialCataloguesRequest)">
            <summary>
            Obtiene los catálogos inciales
            </summary>
            <param name="request">Modelo para Obtiene los catálogos inciales</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.AuthController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.Login(LogicApi.Model.Request.Authorization.LoginRequest)">
            <summary>
            Autenticación
            </summary>
            <param name="request">Modelo para autenticación</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.CreateUser(LogicApi.Model.Request.Authorization.CreateUserRequest)">
            <summary>
            Registrar Usuario
            </summary>
            <param name="request">Modelo para autenticación</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.AssignPerson(LogicApi.Model.Request.Authorization.AssignPersonRequest)">
            <summary>
            Asignar una persona
            </summary>
            <param name="request">Modelo para autenticación</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.UpdateUser(LogicApi.Model.Request.Authorization.UpdateUserRequest)">
            <summary>
            Actualiza información de usuario
            </summary>
            <param name="request">Modelo para autenticación</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.Logout(LogicApi.Model.Request.Authorization.LogoutRequest)">
            <summary>
            Cierra sesión
            </summary>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.RefreshToken(LogicApi.Model.Request.Authorization.RefreshTokenRequest)">
            <summary>
            Refrescar el token
            </summary>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.PasswordChange(LogicApi.Model.Request.Authorization.PasswordChangeRequest)">
            <summary>
            Cambiar contraseña 
            </summary>
            <param name="request">Request de cambio de contraseña</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.PasswordForgotten(LogicApi.Model.Request.Authorization.PasswordForgottenRequest)">
            <summary>
            Olvidó contraseña
            </summary>
            <param name="request">Olvidó contraseña</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.BiometricRegister(LogicApi.Model.Request.Authorization.RegisterBiometricRequest)">
            <summary>
            Registrar Biométrico
            </summary>
            <param name="request">Registrar Biométrico</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.AuthController.RemoveBiomegric(LogicApi.Model.Request.Authorization.RemoveBiometricRequest)">
            <summary>
            Borrar Biométrico
            </summary>
            <param name="request">Borrar Biométrico</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CardController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.CardController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CardController.RegisterCard(LogicApi.Model.Request.Card.RegisterCardRequest)">
            <summary>
            Registra una tarjeta
            </summary>
            <param name="request">Request de Registra una tarjeta</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CardController.GetMyCards(LogicApi.Model.Request.Card.GetMyCardsRequest)">
            <summary>
            Obtienes las tarjetas relacionadas al usuario
            </summary>
            <param name="request">Request de Obtienes las tarjetas relacionadas al usuario</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CardController.DeleteCard(LogicApi.Model.Request.Card.DeleteCardRequest)">
            <summary>
            Elimina la tarjeta asociada al usuario
            </summary>
            <param name="request">Request de Elimina la tarjeta asociada al usuario</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CardController.ValidateCard(LogicApi.Model.Request.Card.ValidateCardRequest)">
            <summary>
            Validación de Tarjeta
            </summary>
            <param name="request">Request de validación de Tarjeta</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ClassReservationController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.ClassReservationController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ClassReservationController.CreateClassReservation(LogicApi.Model.Request.ClassReservation.CreateClassReservationRequest)">
            <summary>
            Crea una nueva reserva de clase
            </summary>
            <param name="request">Modelo para crear reserva de clase</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ClassReservationController.CancelClassReservation(LogicApi.Model.Request.ClassReservation.CancelClassReservationRequest)">
            <summary>
            Cancela una reserva de clase existente
            </summary>
            <param name="request">Modelo para cancelar reserva de clase</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ClassScheduleController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.ClassScheduleController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ClassScheduleController.CreateClassSchedule(LogicApi.Model.Request.ClassSchedule.CreateClassScheduleRequest)">
            <summary>
            Crea un nuevo horario de clase
            </summary>
            <param name="request">Modelo para crear horario de clase</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CompanionController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.CompanionController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CompanionController.CreateOrUpdateCompanion(LogicApi.Model.Request.Companion.CreateOrUpdateCompanionRequest)">
            <summary>
            Crear Compañero
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CompanionController.GetMyCompanion(LogicApi.Model.Request.Companion.GetMyCompanionRequest)">
            <summary>
            Obteniene compañeros registrados
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.CompanionController.SearchCompanion(LogicApi.Model.Request.Companion.SearchCompanionRequest)">
            <summary>
            Busca compañero de viaje
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.DeviceController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.DeviceController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.DeviceController.PushToken(LogicApi.Model.Request.Device.RegisterPushTokenRequest)">
            <summary>
            Actualiza el push token
            </summary>
            <param name="request">Request de actualización</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GroupClassController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.GroupClassController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GroupClassController.CreateGroupClass(LogicApi.Model.Request.GroupClass.CreateGroupClassRequest)">
            <summary>
            Crea una nueva clase grupal
            </summary>
            <param name="request">Modelo para crear clase grupal</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.GymController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymController.GetGyms(LogicApi.Model.Request.Gym.GetGymsRequest)">
            <summary>
            Obtiene la lista de gimnasios con paginación
            </summary>
            <param name="request">Modelo para obtener gimnasios</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymController.GetGymByGuid(System.Guid)">
            <summary>
            Obtiene un gimnasio por su GUID
            </summary>
            <param name="gymGuid">GUID del gimnasio</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymController.CreateGym(LogicApi.Model.Request.Gym.CreateGymRequest)">
            <summary>
            Crea un nuevo gimnasio
            </summary>
            <param name="request">Modelo para crear gimnasio</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymController.UpdateGym(LogicApi.Model.Request.Gym.UpdateGymRequest)">
            <summary>
            Actualiza un gimnasio existente
            </summary>
            <param name="request">Modelo para actualizar gimnasio</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymMachineController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.GymMachineController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymMachineController.CreateGymMachine(LogicApi.Model.Request.GymMachine.CreateGymMachineRequest)">
            <summary>
            Crea una nueva máquina de gimnasio
            </summary>
            <param name="request">Modelo para crear máquina</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymMachineController.UpdateGymMachine(LogicApi.Model.Request.GymMachine.UpdateGymMachineRequest)">
            <summary>
            Actualiza una máquina de gimnasio existente
            </summary>
            <param name="request">Modelo para actualizar máquina</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymReviewController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.GymReviewController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymReviewController.GetGymReviews(System.Guid,LogicApi.Model.Request.GymReview.GetGymReviewsRequest)">
            <summary>
            Obtiene las reseñas de un gimnasio
            </summary>
            <param name="gymGuid">GUID del gimnasio</param>
            <param name="request">Parámetros de consulta</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.GymReviewController.CreateGymReview(LogicApi.Model.Request.GymReview.CreateGymReviewRequest)">
            <summary>
            Crea una nueva reseña de gimnasio
            </summary>
            <param name="request">Modelo para crear reseña</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.LoggerController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.LoggerController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.LoggerController.RegisterLog(LogicApi.Model.Request.Logger.RegisterLogRequest)">
            <summary>
            Permite registrar logs desde dispositivos
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.MembershipController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipController.GetMemberships(LogicApi.Model.Request.Membership.GetMembershipsRequest)">
            <summary>
            Obtiene la lista de membresías con paginación
            </summary>
            <param name="request">Modelo para obtener membresías</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipController.GetMembershipByGuid(System.Guid)">
            <summary>
            Obtiene una membresía por su GUID
            </summary>
            <param name="membershipGuid">GUID de la membresía</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipController.CreateMembership(LogicApi.Model.Request.Membership.CreateMembershipRequest)">
            <summary>
            Crea una nueva membresía
            </summary>
            <param name="request">Modelo para crear membresía</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipController.UpdateMembership(LogicApi.Model.Request.Membership.UpdateMembershipRequest)">
            <summary>
            Actualiza una membresía existente
            </summary>
            <param name="request">Modelo para actualizar membresía</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipTypeController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.MembershipTypeController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipTypeController.GetMembershipTypes(LogicApi.Model.Request.MembershipType.GetMembershipTypesRequest)">
            <summary>
            Obtiene la lista de tipos de membresía con paginación
            </summary>
            <param name="request">Modelo para obtener tipos de membresía</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.MembershipTypeController.CreateMembershipType(LogicApi.Model.Request.MembershipType.CreateMembershipTypeRequest)">
            <summary>
            Crea un nuevo tipo de membresía
            </summary>
            <param name="request">Modelo para crear tipo de membresía</param>
            <returns></returns>
        </member>
        <member name="T:GatewayCoreAPI.Controllers.V1.OrderController">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.OrderController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.GenerateOrder(LogicApi.Model.Request.Order.GenerateOrderRequest)">
            <summary>
            Genera Orden
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.ManualCancelOrder(LogicApi.Model.Request.Order.ManualCancelOrderRequest)">
            <summary>
            Cancelar Orden
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.VerifyOrderValues(LogicApi.Model.Request.Order.VerifyOrderValuesRequest)">
            <summary>
            Verifica los datos del request para cáculos e información
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.GetMyOrderPaginated(LogicApi.Model.Request.Order.GetMyOrdersPaginatedRequest)">
            <summary>
            Obtiene las ordenes paginados
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.GetOrderDetails(LogicApi.Model.Request.Order.GetOrderDetailsRequest)">
            <summary>
            Obtiene el detalle de la órden
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.GetInitialMyOrders(LogicApi.Model.Request.Order.GetInitialMyOrdersRequest)">
            <summary>
            Solicitud Inicial para Grupo de ordenes
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.PaymentOrderByCard(LogicApi.Model.Request.Order.Payment.PaymentOrderByCardRequest)">
            <summary>
            Pago de orden por Pasarela de Pagos (Tarjeta)
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.PaymentOrderByCrypto(LogicApi.Model.Request.Order.Payment.PaymentOrderByCryptoRequest)">
            <summary>
            Pago de orden Pasarela de Pagos (Criptomoneda)
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.OrderController.PaymentOrderByLink(LogicApi.Model.Request.Order.Payment.PaymentOrderByLinkRequest)">
            <summary>
            Pago de orden por Link de Pago
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PersonalGoalController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.PersonalGoalController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PersonalGoalController.GetPersonalGoals(LogicApi.Model.Request.PersonalGoal.GetPersonalGoalsRequest)">
            <summary>
            Obtiene la lista de objetivos personales con paginación
            </summary>
            <param name="request">Modelo para obtener objetivos personales</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PersonalGoalController.CreatePersonalGoal(LogicApi.Model.Request.PersonalGoal.CreatePersonalGoalRequest)">
            <summary>
            Crea un nuevo objetivo personal
            </summary>
            <param name="request">Modelo para crear objetivo personal</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PersonalGoalController.UpdatePersonalGoal(LogicApi.Model.Request.PersonalGoal.UpdatePersonalGoalRequest)">
            <summary>
            Actualiza un objetivo personal existente
            </summary>
            <param name="request">Modelo para actualizar objetivo personal</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PlaceController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.PlaceController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PlaceController.UpdateFavoritePlace(LogicApi.Model.Request.Place.UpdateFavoritePlaceRequest)">
            <summary>
            Actualizar Lugares Favoritos
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PlaceController.GetPlacesPaginated(LogicApi.Model.Request.Place.GetPlacesPaginatedRequest)">
            <summary>
            Obtiene los lugares paginados
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.PlaceController.GetMyFavoritePlace(LogicApi.Model.Request.Place.GetMyFavoritePlaceRequest)">
            <summary>
            Obtiene los lugares favoritos
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ProcessTrackingController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.ProcessTrackingController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ProcessTrackingController.GetProcessTrackings(LogicApi.Model.Request.ProcessTracking.GetProcessTrackingsRequest)">
            <summary>
            Obtiene la lista de seguimientos de procesos con paginación
            </summary>
            <param name="request">Modelo para obtener seguimientos de procesos</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ProcessTrackingController.GetProcessTrackingByGuid(System.Guid)">
            <summary>
            Obtiene un seguimiento de proceso por su GUID
            </summary>
            <param name="processTrackingGuid">GUID del seguimiento de proceso</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ProcessTrackingController.CreateProcessTracking(LogicApi.Model.Request.ProcessTracking.CreateProcessTrackingRequest)">
            <summary>
            Crea un nuevo seguimiento de proceso
            </summary>
            <param name="request">Modelo para crear seguimiento de proceso</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.ProcessTrackingController.UpdateProcessTracking(LogicApi.Model.Request.ProcessTracking.UpdateProcessTrackingRequest)">
            <summary>
            Actualiza un seguimiento de proceso existente
            </summary>
            <param name="request">Modelo para actualizar seguimiento de proceso</param>
            <returns></returns>
        </member>
        <member name="T:GatewayCoreAPI.Controllers.V1.SeatController">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SeatController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.SeatController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SeatController.ReserveSeat(LogicApi.Model.Request.Seat.ReserveSeatRequest)">
            <summary>
            Registra un nuevo asiento al cliente en contexto
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SeatController.GetSeatAvailable(LogicApi.Model.Request.Seat.GetSeatAvailableRequest)">
            <summary>
            Obtiene la iformación de asientos disponibles
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SecurityController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.SecurityController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SecurityController.GetPublicKey(LogicApi.Model.Request.Security.GetPublicKeyRequest)">
            <summary>
            Llave publica
            </summary>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SecurityController.DocumentValidation(LogicApi.Model.Request.Security.DocumentValidationRequest)">
            <summary>
            Llave publica
            </summary>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SecurityController.Encrypt(LogicApi.Model.Request.Security.EncryptRequest)">
            <summary>
            Encrypt (Solo para uso de desarrollo)
            </summary>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.SecurityController.Decrypt(LogicApi.Model.Request.Security.DecryptRequest)">
            <summary>
            Decrypt (Solo para uso de desarrollo)
            </summary>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TicketController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.TicketController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TicketController.GetTickets(LogicApi.Model.Request.Ticket.GetTicketsAvailableRequest)">
            <summary>
            Obtiene boletos disponibles
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TrainerController.#ctor(Common.Messages.IUserMessages,Microsoft.Extensions.Logging.ILogger{GatewayCoreAPI.Controllers.V1.TrainerController},MediatR.IMediator)">
            <summary>
            Constructor
            </summary>
            <param name="userMessages"></param>
            <param name="logger"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TrainerController.GetTrainers(LogicApi.Model.Request.Trainer.GetTrainersRequest)">
            <summary>
            Obtiene la lista de entrenadores con paginación
            </summary>
            <param name="request">Modelo para obtener entrenadores</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TrainerController.GetTrainerByGuid(System.Guid)">
            <summary>
            Obtiene un entrenador por su GUID
            </summary>
            <param name="trainerGuid">GUID del entrenador</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TrainerController.CreateTrainer(LogicApi.Model.Request.Trainer.CreateTrainerRequest)">
            <summary>
            Crea un nuevo entrenador
            </summary>
            <param name="request">Modelo para crear entrenador</param>
            <returns></returns>
        </member>
        <member name="M:GatewayCoreAPI.Controllers.V1.TrainerController.UpdateTrainer(LogicApi.Model.Request.Trainer.UpdateTrainerRequest)">
            <summary>
            Actualiza un entrenador existente
            </summary>
            <param name="request">Modelo para actualizar entrenador</param>
            <returns></returns>
        </member>
    </members>
</doc>
